notifications:
  email: false

sudo: false

env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "Z6mg8KFX4BOfIt9DiUzoTeRuy/kND63Ih8BGQmsXIHZMyHyi+zGoC1PNCNC+wrH4WN+9ARDlJYwyva4UbZfiXj0an+cE70qqZyU3nBQhSc3Ug+FIjZ0/4PLLT1hYuP6QdChihUtERdeQ7YXWU//+ZcBLITIgCs69zpSlFGwgiN0+130g89EFS7zQ0IYjOQzFCwWTjtci/Mc4dTONXfFVqXD/m40Wd+CZQyoscJGV5b05AdonGbWB5GGiKgbJLAkCq56igGgcesXr03bHwq1VDYlY6dHwTNtY8qYnvyzEWzaCvrmW88ij11oHQleqOSEcYY31j4Ds3ZR+ggWi0FXJ9IjxzeS30HG+o7a32xIxMUf8yZLuuzCcR+zVKE3Y5yenJ/CzSohyhUlv8EuRMvG2yZCzQVHr0XV51N2uSx0G7Yplc9aKe6R0qEtaSwQSY+jcl8/fWtgPowczccysNBvi3FR/xaiBRQ2fh9+8O5tViDyd+gkYTRpRrIhVQZjkgBUZTOzpIUBdQFTBMTzlY8+f0RF1qr7xbmYy6T5KY3fiT5EdXK/1M2aSUY05rKSW71KM8b5MNgsNzX02T8fVTt98VIwczIj9ehLAs15ASr4R39tdKz9q2UiUqlhmEB2xQazuxndcKOMJnkjA5yPxdl3Kt/PLdcuxmlCl0xeQV1pPyTc="

matrix:
  fast_finish: true
  include:
    # Main Application Release Coverity Scan
    - os: linux
      env: BUILD_TYPE=Release BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain GEN_DOCS=FALSE
      before_install:
        - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      addons:
        coverity_scan:
          project:
            name: "Theodor-Lindberg/pyb-embedded"
            description: "Low level embedded project with a platform agnostic developement environment"
          notification_email: theodor.lindberg.se@gmail.com
          build_command_prepend: "cov-configure --template --compiler arm-none-eabi-gcc --comptype gcc --xml-option=skip_file:/third_party/"
          build_command: "make"
          branch_pattern: coverity_scan
      if: branch = coverity_scan

    # Main Application Release SonarCloud Scan
    - os: linux
      dist: trusty
      env: BUILD_TYPE=Release BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain GEN_DOCS=FALSE
      cache:
        directories:
          - '$HOME/.sonar/cache'
      addons:
        sonarcloud:
          organization: "theodor-lindberg"
          token:
            secure: "gk+Ay/66QgoHCLkHxXE7cAWlQsnxZqoi57QZJXZ3lsBWAgbd3TtE88qAUjer6JsLqVbYfKPploQTTuwsrSaLE+gKdz9pmcCC3rg+16wOkD9p+eO6wqDXch6mu5XREnOiqvnZuqVHTIsNJcE7iH94IzZT5Xifmn+Q7XHVJu5hDzonZYNq04/EykzIn1yIEJLEGJoeUx6njZivtJRFgVJsapBJVGPFvoUagtImjv/2KOy9vnZTdOmTMnODoQoHK011NplHeY2hAVWGcBBMmXMNIiyCz816XXyObtCdeaEI22DMgL+ub67g+eaDVd+eTvC45ICC7HKfwIxZOh97vDJFKGV6lxCAlM3202iillXCBzxo6xVCET+uotDS8W7iVKMOdmu53hGZGF/SvHHIrnZITaoPXe+Dhquq330WioZQ/ZkVRGVLPgXuBbyoq/QL7FW/rw0JMQxQjgnYzcv3JEVmoKastWf1r3GgbVH6n8mw8FEUVYXJw8Mw0HR0J7q/ZF/xUXZJP5OQyw1unCRDllpKvcMANan7VaWllb+vEqux12Och0OPylkWCe6I3uTbSwJzosmzCHh3DufRzC2SgvLs3zVi4pK690HawIZYC0FxnAVCjgs2yo5DNvtuWgaSkPUK86U5KjRqFQJvxwOwgwKdiDxmTBVFrd6ZNIQiwjC448U="
      script:
        - build-wrapper-linux-x86-64 --out-dir bw-output make
        - cd ..
        - sonar-scanner
        
    # Main Application Debug
    - os: linux
      env: BUILD_TYPE=Debug BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain
      if: branch != coverity_scan
      
    # Unit tests Debug with code coverage
    - os: linux
      env: BUILD_TYPE=Debug BUILD_TESTS=TRUE ENABLE_COVERAGE=TRUE TARGET=Tests TOOLCHAIN=GCC
      language: minimal
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      if: branch != coverity_scan

install:
  # Set up GNU ARM Embedded Toolchain
  - |
    if [ "${TOOLCHAIN}" == "GNU-ARM-Toolchain" ]; then
      pushd .
      cd ~ 
      mkdir arm-gcc-toolchain
      wget -O $HOME/arm-gcc-toolchain/gcc.tar.bz2 https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update
      cd arm-gcc-toolchain
      tar -jxf gcc.tar.bz2 --strip=1
      popd
      export PATH=$HOME/arm-gcc-toolchain/bin:$PATH
    fi
  # Set up CMake
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.12.3-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.12.3-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  - |
    if [ "${TOOLCHAIN}" == "GNU-ARM-Toolchain" ]; then
      arm-none-eabi-g++ --version
    fi
  - cmake --version && make --version
  - mkdir -p build && cd build
  - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS:BOOL=$BUILD_TESTS -DENABLE_COVERAGE:BOOL=$ENABLE_COVERAGE -DGEN_DOCS:BOOL=$GEN_DOCS -D"CMAKE_TOOLCHAIN_FILE=../cmake/${TOOLCHAIN}.cmake" ../

script:
  - make
  - |
    if [ "${BUILD_TESTS}" == "TRUE" ]; then
      ./tests/proj_test
    fi
after_success:
  - |
    if [ "${ENABLE_COVERAGE}" == "TRUE" ]; then
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    fi