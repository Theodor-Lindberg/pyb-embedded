notifications:
  email: false

sudo: false

language: minimal

matrix:
  fast_finish: true
  include:
    - name: 7-2018-q2
      env: GCC_URL=https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update

install:
  # Set up GNU ARM Embedded Toolchain
  - pushd .
  - cd ~ 
  - mkdir arm-gcc-toolchain
  - wget -O $HOME/arm-gcc-toolchain/gcc.tar.bz2 $GCC_URL
  - cd arm-gcc-toolchain
  - tar -jxf gcc.tar.bz2 --strip=1
  - popd
  - export PATH=$HOME/arm-gcc-toolchain/bin:$PATH
  # Set up CMake
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.12.3-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.12.3-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  - arm-none-eabi-g++ --version && cmake --version && make --version # Print the versions used
  - mkdir build && cd build # Create and enter build directory
  - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -Dbuild_tests=false -D"CMAKE_TOOLCHAIN_FILE=../cmake/GNU-ARM-Toolchain.cmake" ../ # Build in release mode

script:
  - make