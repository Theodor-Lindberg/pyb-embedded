notifications:
  email: false

sudo: false

language: minimal

# white list for branches
branches:
  only:
    - ci-testing

#env:
#  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
#   - secure: "Zv7ysinv55XRZn3wkqCff5n+PRqFNxFZN1G3ZEI2KBh/LJ/g0wNQAGSillJD9s0/UBPvFScTDRoXYhIHt8hciSWGnMy+XWGrXpgbnFH2kW2qRwsZyc/aV+XiuNEk+xb/Z+pH/YaLCtoM3nZNwVXPvQerubkJY7+kBkXv+hBUVHWmbesQRyLnUtwnWU/tTRmYQFjJ4InprkNweFiMK55Z88UQNZaDnnfhaA2IMcmkXK4txTGQpP9Wpe3kO4Ok8dVm+998tkhp8E2x9IoMJRaQ1i4OqxcVcye6+iJE2coFgJT1wZ+pUlwvSQmbSBNvyj2gwynrVhVfIRiKDxi+/N2nANhmMIg7VbM1aoEVaCqgbFpcPBLDXyOQzV+wSqXifjZYqsz0x6KwWsi29xRjw2PNXAulovg2X8qdocG7ok6h8Mu9oIIN5XSKqKd0CwIiyxLsRaNFNBRh6Zhfyek3BWLu5eFTYlF0B2XIcIJVRR+zGQwa/rMXKa5o9AcyIb8RGyCxKCkwHzp3J+uTxvWTtzmsZcSzHGNGum/ly+Agl0BL1fXyV4prT1qkn1wDGgXLl79UzpAAWhhlsAw1nqJNGIqJOIBr4SRiVqjKTi7nQUlYsW2vRRe/VHzcErroeUY+nn6MLPgEsTlGumPMHwlt5OjCJDYY5P/ip3pRHLzdmbq/AOs="

addons:
  sonarcloud:
    organization: "theodor-lindberg"
    token:
      secure: "gk+Ay/66QgoHCLkHxXE7cAWlQsnxZqoi57QZJXZ3lsBWAgbd3TtE88qAUjer6JsLqVbYfKPploQTTuwsrSaLE+gKdz9pmcCC3rg+16wOkD9p+eO6wqDXch6mu5XREnOiqvnZuqVHTIsNJcE7iH94IzZT5Xifmn+Q7XHVJu5hDzonZYNq04/EykzIn1yIEJLEGJoeUx6njZivtJRFgVJsapBJVGPFvoUagtImjv/2KOy9vnZTdOmTMnODoQoHK011NplHeY2hAVWGcBBMmXMNIiyCz816XXyObtCdeaEI22DMgL+ub67g+eaDVd+eTvC45ICC7HKfwIxZOh97vDJFKGV6lxCAlM3202iillXCBzxo6xVCET+uotDS8W7iVKMOdmu53hGZGF/SvHHIrnZITaoPXe+Dhquq330WioZQ/ZkVRGVLPgXuBbyoq/QL7FW/rw0JMQxQjgnYzcv3JEVmoKastWf1r3GgbVH6n8mw8FEUVYXJw8Mw0HR0J7q/ZF/xUXZJP5OQyw1unCRDllpKvcMANan7VaWllb+vEqux12Och0OPylkWCe6I3uTbSwJzosmzCHh3DufRzC2SgvLs3zVi4pK690HawIZYC0FxnAVCjgs2yo5DNvtuWgaSkPUK86U5KjRqFQJvxwOwgwKdiDxmTBVFrd6ZNIQiwjC448U="


# Main Application Release SonarCloud Scan
os: linux
dist: trusty
env: BUILD_TYPE=Release BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain GEN_DOCS=FALSE
script:
  - build-wrapper-linux-x86-64 --out-dir bw-output make
  - cd ..
  - ls
  - sonar-scanner
cache:
  directories:
    - '$HOME/.sonar/cache'

install:
  # Set up GNU ARM Embedded Toolchain
  - |
    if [ "${TOOLCHAIN}" == "GNU-ARM-Toolchain" ]; then
      pushd .
      cd ~ 
      mkdir arm-gcc-toolchain
      wget -O $HOME/arm-gcc-toolchain/gcc.tar.bz2 https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update
      cd arm-gcc-toolchain
      tar -jxf gcc.tar.bz2 --strip=1
      popd
      export PATH=$HOME/arm-gcc-toolchain/bin:$PATH
    fi
  # Set up CMake
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.12.3-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.12.3-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  - |
    if [ "${TOOLCHAIN}" == "GNU-ARM-Toolchain" ]; then
      arm-none-eabi-g++ --version
    fi
  - cmake --version && make --version # Print the versions used
  - mkdir -p build && cd build # Create and enter build directory
  - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS:BOOL=$BUILD_TESTS -DENABLE_COVERAGE:BOOL=$ENABLE_COVERAGE -DGEN_DOCS:BOOL=$GEN_DOCS -D"CMAKE_TOOLCHAIN_FILE=../cmake/${TOOLCHAIN}.cmake" ../

after_success:
  - |
    if [ "${ENABLE_COVERAGE}" == "TRUE" ]; then
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    f