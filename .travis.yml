notifications:
  email: false

sudo: false

language: minimal

# safelist
branches:
  only:
    - master
    - coverity_scan

#env:
#  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
#   - secure: "Zv7ysinv55XRZn3wkqCff5n+PRqFNxFZN1G3ZEI2KBh/LJ/g0wNQAGSillJD9s0/UBPvFScTDRoXYhIHt8hciSWGnMy+XWGrXpgbnFH2kW2qRwsZyc/aV+XiuNEk+xb/Z+pH/YaLCtoM3nZNwVXPvQerubkJY7+kBkXv+hBUVHWmbesQRyLnUtwnWU/tTRmYQFjJ4InprkNweFiMK55Z88UQNZaDnnfhaA2IMcmkXK4txTGQpP9Wpe3kO4Ok8dVm+998tkhp8E2x9IoMJRaQ1i4OqxcVcye6+iJE2coFgJT1wZ+pUlwvSQmbSBNvyj2gwynrVhVfIRiKDxi+/N2nANhmMIg7VbM1aoEVaCqgbFpcPBLDXyOQzV+wSqXifjZYqsz0x6KwWsi29xRjw2PNXAulovg2X8qdocG7ok6h8Mu9oIIN5XSKqKd0CwIiyxLsRaNFNBRh6Zhfyek3BWLu5eFTYlF0B2XIcIJVRR+zGQwa/rMXKa5o9AcyIb8RGyCxKCkwHzp3J+uTxvWTtzmsZcSzHGNGum/ly+Agl0BL1fXyV4prT1qkn1wDGgXLl79UzpAAWhhlsAw1nqJNGIqJOIBr4SRiVqjKTi7nQUlYsW2vRRe/VHzcErroeUY+nn6MLPgEsTlGumPMHwlt5OjCJDYY5P/ip3pRHLzdmbq/AOs="

addons:
  sonarcloud:
    organization: "theodor-lindberg"
    token:
      secure: "FELOy7HeRWzg7IzEe6wF/MV/jXQmWkf5gzS1suMSGpq2YTHmL7WL+ASruxLB1dghoSpApDT0BY49aeb0HyMwEHcCRmwf6zoVZ0fdxtUS2DHbRJ8Spo2T9RPCsfVYksN8vXDrwgoGkB6x7K69xKMDxE/T746YPWU4wVSxLgSzjZJ3H/wiBaD5odCZ/sSo9x/g1wkPADbxIHjpwPGEBiwHE90zAODakgsIvlsKjwcoHjPJz4nTtqLCaNvuHOqZOEbRktIbfVBs+jRnhIjI+PgzsFFwRUHWqWEEcaxvNSl+kF+KQrYVkLzjJf0De3CWTI6jKYbMzEERTyOB3jeNtM4yb4jh7FO6lOfWYL1aW+GESbEbVNTsLwd5yTs6cMPnRuqSowlbkQoEL9qeAQKuwW1qA8TJlbdDSZsy+ETohf+VeSfNXNpo3bicziMF/Sxscj/jmLw9KiztvV3dKfXlYC/7L5BjC2Ys/y1HdnVfX/vd5v1RULV4rzOXiMT+iSa3uRTFUV9AX6Hk2kQ9QU6oC3TMTGfdyryAJ4wtWgBRmEPzWXUUk9DLQvieFnEHttrEG5aZf+4Fo4HPhRtebr6ut8POG8tixfcr3mkG4GNETW/OSjhZdbuHy+egzVDU5ILN+QKT8g1vnEfGjNWsQ7XyD5SmnQl0ljUCfrnzJsW1fUssq6o="

matrix:
  fast_finish: true
  include:
    # Main Application Release Coverity Scan
    - os: linux
      env: BUILD_TYPE=Release BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain GEN_DOCS=FALSE
      before_install:
        - echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      addons:
        coverity_scan:
          project:
            name: "Theodor-Lindberg/pyb-embedded"
            description: "Low level embedded project with a platform agnostic developement environment"
          notification_email: theodor.lindberg.se@gmail.com
          build_command_prepend: "cov-configure --template --compiler arm-none-eabi-gcc --comptype gcc --xml-option=skip_file:/third_party/"
          build_command: "make"
          branch_pattern: coverity_scan
      if: branch = coverity_scan

    # Main Application Release
    - os: linux
      env: BUILD_TYPE=Release BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain GEN_DOCS=FALSE
      if: branch != coverity_scan

    # Main Application Debug
    - os: linux
      env: BUILD_TYPE=Debug BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain
      if: branch != coverity_scan

    # Unit tests Debug with code coverage
    - os: linux
      env: BUILD_TYPE=Debug BUILD_TESTS=TRUE ENABLE_COVERAGE=TRUE TARGET=Tests TOOLCHAIN=GCC
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      if: branch != coverity_scan

    # Main Application Release SonarCloud Scan
    - os: linux
      dist: trusty
      env: BUILD_TYPE=Release BUILD_TESTS=FALSE ENABLE_COVERAGE=FALSE TARGET=App TOOLCHAIN=GNU-ARM-Toolchain GEN_DOCS=FALSE
      script:
        # Wraps the compilation with the Build Wrapper to generate configuration (used
        # later by the SonarQube Scanner) into the "bw-output" folder
        - build-wrapper-linux-x86-64 --out-dir bw-output make
        # And finally run the SonarQube analysis - read the "sonar-project.properties"
        # file to see the specific configuration
        - sonar-scanner
      if: branch = master

install:
  - chmod +x sonar-scanner
  # Set up GNU ARM Embedded Toolchain
  - |
    if [ "${TOOLCHAIN}" == "GNU-ARM-Toolchain" ]; then
      pushd .
      cd ~ 
      mkdir arm-gcc-toolchain
      wget -O $HOME/arm-gcc-toolchain/gcc.tar.bz2 https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2?revision=bc2c96c0-14b5-4bb4-9f18-bceb4050fee7?product=GNU%20Arm%20Embedded%20Toolchain,64-bit,,Linux,7-2018-q2-update
      cd arm-gcc-toolchain
      tar -jxf gcc.tar.bz2 --strip=1
      popd
      export PATH=$HOME/arm-gcc-toolchain/bin:$PATH
    fi
  # Set up CMake
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.tar.gz
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.12.3-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.12.3-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

before_script:
  - |
    if [ "${TOOLCHAIN}" == "GNU-ARM-Toolchain" ]; then
      arm-none-eabi-g++ --version
    fi
  - cmake --version && make --version # Print the versions used
  - mkdir -p build/$TARGET && cd build/$TARGET # Create and enter build directory
  - cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTS:BOOL=$BUILD_TESTS -DENABLE_COVERAGE:BOOL=$ENABLE_COVERAGE -DGEN_DOCS:BOOL=$GEN_DOCS -D"CMAKE_TOOLCHAIN_FILE=../../cmake/${TOOLCHAIN}.cmake" ../../

script:
  - make
  - |
    if [ "${BUILD_TESTS}" == "TRUE" ]; then
      ./tests/proj_test
    fi

after_success:
  - |
    if [ "${ENABLE_COVERAGE}" == "TRUE" ]; then
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    fi